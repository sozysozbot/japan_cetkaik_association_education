hsjoihs「『定例会で issue を眺めるべきリポジトリの一覧』を立てて、それに従うという手」
hsjoihs「つまり、『こういうタスクがあることを自覚しましょう』会」
meloviliju「解決する会もやったほうがいい」
hsjoihs「かなり高頻度の『タスクを見る会』と、比較的低頻度の『実働会』に分離するというのがよいと思っている」
hsjoihs「タスクを見る会はコストが安く、逃してもあんま困らないので、かなり機械的にやってもいいかなと」
hsjoihs「逃してもあんま困らないことから、曜日がバラけるシステムでもいいので」
meloviliju「3 日ごととか」
hsjoihs「そうしましょうか」
hsjoihs「まあそれは bot を書けばいい」
hsjoihs「今日の皆さんのご予定は」 
hsjoihs「じゃあ、実働会の初回として、『bot は作れる』ということの教育を、じゃあみっとんに振ります」
hsjoihs「つまりどういうことかというと、やれと決めたので、それに基づいてなにをどう調べてどうするかを自分で考えていただく。極端に筋が悪いと私とかが判断した際に、みっとんに助言するが、それ以外はみっとんが行った判断に任せる」 
MIT「首が絞まりそうになるまで実装？」
MIT「なにをする bot であるかを考えないといけない」
hsjoihs「それについては、3 日ごとにメンションを飛ばす bot であると規定します」
MIT「今の話の流れ的にそれはそうじゃん。了解」
hsjoihs「ああ、ということで、今開催されているのが遡及的に実働会になりました」
hsjoihs「実況をして下さいね」
MIT「パソコンに繋ぐので数分間お待ち下さい」
hsjoihs「このように、実働会の教育部門は、『ほっといてもこの人は身につけないであろうスキルだが、その実やってみるとそんなにつらくないもの』を押し付けるという方針がいいのかなと思っています」
hsjoihs「なお、この方法を他人へと押し付けるのではなく、自分へ押し付けるというのもやり方だと思っています」
hsjoihs「今日私はこれについて教育されます、と宣言して、実際にそれをやりつつ、他の人もただ実況を聞いてるだけでは虚無なので、調べて『これこういう情報見つけたけど』とかを言う、とか」
SY「私はサークル納期の近い作業がある」
meloviliju「ああ、みんなでもくもくじゃないのか」
hsjoihs「そういう会があってもいいが、それは教育ではなく労働力供与です」
hsjoihs「もくもく会が適するのは、『手書き文書を分担して読んで、適宜質問をして』みたいな、既に皆がそれなりにできる、新規性がないが必要な作業、それこそがもくもく会に向いている」
hsjoihs「一方で、comfort zone から一歩踏み出して、『ほっといてもこの人は身につけないであろうスキルだが、その実やってみるとそんなにつらくないもの』を強要するのが、教育会ですね」
SY「燐字フォント製作を回せるぐらいには教育したい」
meloviliju「だいぶやりたいが、一方で一人にやるには重い」
hsjoihs「画面配信がされているようだが、みっとんの声が聞こえていない」
hsjoihs「画面配信がされてますが、私は見ないので、『何をやっているか』をかなり明確に言語化し続けて下さい」
hsjoihs「私が見ると答えを言っちゃうので」
hsjoihs「言語化を強要します。これは、みっとんは普通に暗黙の前提の共有がかなり下手なので、それを改善させる目的があります」
hsjoihs「なので、私は見ないので、見ていないけれどもどういう状況なのか、がわかるぐらいの密度の実況をお願いします」
hsjoihs「実況により手を動かす速度が落ちることは想定内です。そもそも速度を優先してたら私が組んでるので」
hsjoihs「meloviliju・SY は配信を見て、言語化の足りていない場合にそれを指摘する役割で」
SY「明日締め切りのタスクがあるのでみっとん画面をあんま見ません」
meloviliju「NF、調査票が受理待ち。そろそろ連絡すべきか」
hsjoihs「KMC でも同じイベントに出してるので、あとで KMC がどうなってるかも調べてお知らせします」
hsjoihs「みっとんから全く実況が聞こえてこないが」
meloviliju「待たずに始めなさい」
MIT「bot の戦略は 2 つ考えていて、Twitter のメンションか、Discord にするか」
meloviliju「Discord」
MIT「bot の作り方を調べます。Discord.py と書いてある」
meloviliju「py はパイです」
MIT「とりあえずそれを眺めます。まず、ライブラリと Discord の API を利用するには、などと書いている。ライブラリと Discord API が私にとって未定義語なので調べます」 
SY「用語がリンクになってたり？」
MIT「しない」
meloviliju「人に聞くとかは？」
hsjoihs「全然聞くことを禁じはしない」
meloviliju「自分ひとりで完結するわけではないよね」
hsjoihs「まあ絶え間なく実況されてればなんでもいいかな」
meloviliju「ライブラリというのは、他人によって公開された便利なもので、API とは『こうするとこうなる』というものです」
MIT「よく考えると、私がやりたいことにライブラリと Discord API が必要かが分からないので、読む」
$URL「https://discordpy.readthedocs.io/ja/latest/discord.html」
MIT「bot のアカウント作成法が書かれている」
hsjoihs「見た Web ページのリンクは毎回貼って下さい、というルールを追加します」 
SY「API ってなんの略？」
hsjoihs「Application-Program Interface だけど、あんまいい名前ではない」
MIT「bot ユーザーが作成されていて、他人に bot の追加を許可することができます」
MIT「よくわからないけどチェックを外しておくとよいらしい」
meloviliju「必要のないものは外すといい」
MIT「トークンを教えると人にその bot が支配されるので、教えてはいけない」
MIT「bot を招待する。なるほど、bot を招待することができるのか。作っただけだと入らない」
MIT「bot アカウントを作りたいということが確定しているための記事だとわかったので、別の記事を見ます」
$URL「https://discordpy.readthedocs.io/ja/latest/discord.html」
SY「これが教育かぁ」
meloviliju「胡乱そうなサイトだ」
MIT「胡乱そうなのかぁ」
meloviliju「まあ読んで下さい」
MIT「サーバーはあって、bot のアカウントにせよ自分のアカウントにせよ読めば良くて、導入部分を読むか」
meloviliju「Python がインストールされているサーバーやパソコンが有ればいい」
MIT「読みます」
MIT「bot の導入作業。bot を作成します。さっきと同様の話がされている。さっきと似ているなぁ」
MIT「bot を起動してやらないといけないらしい。ということで bot を起動するための手順が載ってる」
MIT「bot を起動。Click to reveal token を押して、トークンを人に教えるなという話がまた出てきた」
MIT「your token here をトークンに置き換えるのか」
MIT「謎で、Python のコードとあるが、ネットに繋いでないコードがあっても動かないはず」
MIT「そもそもこれは、Discord の bot にとって Python というのがどういう存在なのかがわかっていない」
meloviliju「レンタルサーバーに置いてるの？」
SY「一度作ったことがあるけど、私はレンタルサーバーに置いた」
meloviliju「bot がネット上にある Python を読みに行ってそれを実行する？」
hsjoihs「ん？」
hsjoihs「『ん？』に留めておきます」
meloviliju「私も調べるかぁ」
hsjoihs「ちょっと一つ。この教育会そのものにコンテンツ性があるので、開催されるごとにこの議事録を一般公開するというのを考えています」
meloviliju「いいんじゃないでしょうか」
SY「知見が世の中に提供されるのは良いこと」
meloviliju「読みに来る人少ないしな」
hsjoihs「実は、こういう手動で取った議事録をいい感じにレンダリングして表示するツールを組んだので」
hsjoihs「なにかというと、C コンパイラ班の過去ログ公開」
MIT「次はなにをしようか。」
MIT「まず、Discord の bot とはなにであるかを調べるか」
$URL「https://seleck.cc/discord-bot」
MIT「これ違う気がするなぁ。一応読むか」
MIT「一応、これの主題『bot は作れる』だから、似た機能のを探すのは最後にしておくか」
hsjoihs「そう、『目的を満たす bot を探して、入れる』は、問題を解決することができているので、それをやって終了、でも良いです」
hsjoihs「結局目的を果たせることが一番求められていることであり、かつ、『自分が責任持って管理しなきゃいけない部分を減らす』というのは、普通に重要なテクです」
hsjoihs「なので、適切な bot を見つけて、今回の目的を果たして、終了、でも全然良い」 
SY「ただ、reminder bot いいの無いんだよなぁ。需要があったのでサークルで作ったんだけど、課金が必要とか、たまにバグるとか、微妙だった」
SY「細かい設定を要求したければ作るしか無いのかなぁ」
meloviliju「どこが痒いか把握するのは結局自分でないとできないのでね」
hsjoihs「まさにそのとおりで、『なぜ常に汎用品を転用せず、たまにコードを書くのか？』という問いの答えは、『ニーズにぴったり合うものを探すより、ニーズに合わせるように自分で書いたほうが楽だ』という状況が往々にしてあるから」
hsjoihs「例えば cerke_online とかを考えていただくと、最初は BGEngine で『オンラインでボードを共有して、対戦したい』という需要を満たしていた」
hsjoihs「しかしながら、『初期配置は常に決まっているのに、それを毎回戻すのが面倒』『動きがどんどん確定していくにつれ、自由に動かせる、という利点がだんだん欠点になってきた』などの経緯から、自作へと移っていくことになった」
hsjoihs「自作は普通にコストが掛かって（主に私が）（私だけが）大変だったが、一方で、これを書いたことにより、」
hsjoihs「まず机戦を知らない人にとってもギリ遊べる代物が完成したことによる布教ハードルの低下」
hsjoihs「単純に、机戦をやりたいのであってそれ以外を求めていないときの利便性の上昇」
hsjoihs「机戦ならではの諸機能、役の判定や点数の計算や棋譜取りなど、がすべて自動化できること」
hsjoihs「などの、まさに『どこが痒いか把握』しているからこそ提供できる価値が提供できた」
hsjoihs「ということで、『既製品を使う』は完全に正解だけれど、それはそれで『いろんな既製品を探し、その中で目的にあうものであるかを別の Discord サーバーを立てて実験し、気に入ったものを採用する』という手間が掛かる。で、どちらの手間を取るべきかというトレードオフを意識して、意思決定をする、または、両方やる」
MIT「とりあえず、あの記事を読みます」
MIT「音楽を流す bot とかあったね」
MIT「bot を追加すると slash コマンドが使える」
MIT「SY のさっきの発言からして、既製品は向かない気がするけど眺めるか。特に有益な情報なし」
MIT「Discord bot 仕組み、とかで調べればいいのかな。しかし仕組みを知りたいのか？」
SY「素朴な方法で調べて何通りか見ればいいのでは」
MIT「といいますと？」
SY「文献学者の発想として、とりあえず多くの文献を乱読したほうが得られるものが多い」
MIT「」
$URL「https://dev.classmethod.jp/articles/discord-bot-by-discordpy/」
SY「実践系の記事はよさそう」
MIT「bot 確認用の鯖作成、たしかに必要だ。読んでからやるか」
MIT「bot の作成、さっきもそんな話あったな」
MIT「Discord.py が何者かを調べるか」
MIT「調べて、知らない語を明らかにしていく」
$URL「https://qiita.com/sizumita/items/9d44ae7d1ce007391699」
MIT「Qiita 記事を見ます」
MIT「いま見なくてよさそうなので、見ません」
meloviliju「ドットパイと読む慣習があります」
MIT「Python が少しは書ける人が前提、なるほど？」
MIT「Python を入れる、なるほど。あなたの bot のトークン、と書いてあるので、bot を作っていることが前提っぽい。さっき読んだ記事が役立ちそう」
MIT「これはローカルで？」
meloviliju「ローカルの CUI でやれということ」
MIT「.py とは Python で書かれたファイルにつくもの？」
meloviliju「しかし Discord.py はどうだろう。Discord.py という名前のライブラリがあって、それを呼び出すファイルを discord.py と命名する慣習がある、ということかと」
meloviliju「.__version__ は『〜の __version__』という意味です」
MIT「JS で似たのを見たなぁ」
SY「私が組んだときには JavaScript でした。JavaScript もあるはず。でも所感として Python の方が情報が多い」
MIT「コルーチン… Python わかんないんだよな」
meloviliju「細かいことは詰まってからやったほうがいい」
MIT「コルーチン関数とは…」
meloviliju「非同期処理というのがあって」
meloviliju「という話をいろんなところで見てきたが、一回も使ったことがない」
MIT「コルーチン関数、深く考えなくてもいいのかなという気持ちになる」
MIT「Discord API から送られてきたものを…」
MIT「これの一つ前の記事になんか書いてあった気がするけど」
MIT「Discord API という名詞が出てきたが、Discord.py と Discord API という二つの語を関係付ける」
MIT「Python ラッパーというものらしい。なにもわからん」
meloviliju「APIを叩くためのもの」
MIT「APIを叩くという概念を理解していない」
meloviliju「叩きやすくしてくれる…ドアノッカーです」
SY「ある部屋とある部屋…アプリケーション同士をつなぐ鍵というか、えーと」
meloviliju「規則としてのコード」
hsjoihs「ちょっとこれは私が介入しようかなぁ」
meloviliju「そのほうがいいと思う」
hsjoihs「API とはなにか、ですが、先程言ったとおり Application-Program Interface の略なんですが、このうち一番最後の Interface だけが重要で、残り二つは理解の妨げになります」 
MIT「API とはインターフェース、なにもわからん」
hsjoihs「インターフェースとはなにかというと、よく『界面』に喩えて訳されます」
hsjoihs「要は、二つの質的に異なるものがあって、それらが接触する領域・方法、というイメージ」
meloviliju「Web サービスに外部から参入するための規則を定めている」
hsjoihs「具体例出しますか。cerke_online」
MIT「一番身近だ」
hsjoihs「cerke_online がどういう仕組みになっているかというと、cerke_online は二つのソフトウェアからなっていて、一つを『フロントエンド』、もう一つを『バックエンド』と呼びます」
MIT「ツイートで見かけるなぁ」
hsjoihs「フロントエンドとは、ブラウザで動く『盤面を表示し、入力を受け付ける』やつです」
hsjoihs「cerke_online のページを開くと、フロントエンドが動いて、机戦を遊ぶことができます」
hsjoihs「さて、フロントエンドは、ユーザーの入力をバックエンドに送ります」
hsjoihs「そして、それを受けてバックエンドから情報が返ってきます」
hsjoihs「なぜこのような仕組みを取っているのか？」
hsjoihs「どう思います？」
MIT「とりあえず、多分よほど新しいことをしない限りはフロントエンドをいじるだけでデザインを変えられるというのがありそう」
hsjoihs「それは正解の一つです。ソフトウェアというものは、うまく分割することで見通しがよくなります」
hsjoihs「分割するということは、『片方がもう片方の内部状態にアクセスする手段』の個数が比較的少数のチャネルへと減少するということです」 
MIT「そうなんだ」 
hsjoihs「自明ではない割にあんま説明の助けにならない気がしてきたな」
hsjoihs「よく喩えられるのは、『なぜあらゆることをやる一つの企業があるのではなく、複数の企業が互いに話し合って仕事が進むのか』」
hsjoihs「ここを詳しく述べてもあんま関係ないのでちょっとスルーしますが」
meloviliju「結局分割による見通しの良さ」
hsjoihs「フロントエンドとバックエンドに分ける理由なんですが、一つ必然的な理由があります」
hsjoihs「それはなにかというと、『プレイヤー 1 が支配するコンピュータと、プレイヤー 2 が支配するコンピュータが、異なったコンピュータにある』からです」
meloviliju「考えてなかった」
MIT「分けないとどのような致命的なことが？」
hsjoihs「例えば、机戦には投げ棒があります。この投げ棒の値は、両プレイヤーが同じものを見る必要があります」
hsjoihs「よって、バックエンドが『プレイヤー A とプレイヤー B の試合で投げられた投げ棒の値』を管理して、それをプレイヤー A とプレイヤー B に伝えるということが必要になる」
hsjoihs「さらに言うなら、フロントエンドは『プレイヤーが支配するコンピュータ』の上で動く」
hsjoihs「ということは、プレイヤーはフロントエンドを不正に改造することができる」
hsjoihs「リモートで机戦をやるときには、素朴にやると『投げ棒の値を相手に伝える』という作業が個人の良心に依存する」
hsjoihs「中間者がいない場合、投げ棒の確率をいじって伝えるイカサマが可能になる」
hsjoihs「投げる様を配信させることで解決できるように一見思えるが、予め録画してある偽の動画を流すという手段がある」
hsjoihs「これも含め、情報系の話をやるときには、最大の悪意を持っても壊せないように作る必要がある」
meloviliju「ゼロトラストの例？」
hsjoihs「これをゼロトラストとは呼ばない。ゼロトラストは、普通『プレイヤーもバックエンドを信用しなくていい』の意味で使う」
hsjoihs「さて、ということで、フロントエンドとバックエンドに分割することによって、バックエンドが状態を中央集権的に管理して、プレイヤー側のコンピュータで動くフロントエンドがイカサマをできないようにする、という役割があることが分かった」
hsjoihs「cerke_online の場合は、『バックエンドがただ一人存在して、そこに向けて情報が送られるので、それを精査して結論を下す』という、中央集権的主体としてバックエンドがある」
hsjoihs「Discord の場合も似たようなことになっていて、Discord 社が管理するコンピュータが、皆さんのパソコンに入ってるアプリから飛んでくる情報を精査して、結論を下して、Discord 社が管理するコンピュータの状態が書き換わって、それを皆さんのパソコンに入ってるアプリが読むことによって、会話が成立する」
hsjoihs「Discord API というのはなにかというと、この『皆さんのパソコンに入ってるアプリ』（フロントエンド）が『Discord 社が管理するコンピュータ』（バックエンド）と会話するときのコミュニケーション手段であって、バックエンドは、同じ言葉を喋ってくれれば如何なるソフトがそれを話したとしても、それを平等に精査して結論を下す」
hsjoihs「なので、Discord アプリが話す言葉と同じ言葉を話せば良い」
hsjoihs「Discord 社は、『メッセージを送るには、こういうことをして下さい』という仕様書を一部公開している」
hsjoihs「それに従ってさえいれば、今私が文字を打ち込んでEnterを押してメッセージを送っているのと同様に、そうでない手段でもメッセージを書き込める」
hsjoihs「なので、APIを叩くというのは、その仕様書に従って、何らかのインタラクションをして、Discord 社の管理してるコンピュータの内部状態を適正に書き換える、という意味」
hsjoihs「bot というのは、人間がアプリをいじるというのではない手段により、人間がアプリをいじるのと同等のインタラクションを Discord 社に飛ばすようなプログラム」
hsjoihs「Discord.py というのは、その API を叩くための適正なインタラクションを、楽に行えるようにする手段」
hsjoihs「さっきラッパーという言葉が出てきた」
hsjoihs「これはどういうことかというと、例えば cerke_online は、実はプレイヤーが直に API を叩くことによってもバックエンドの状態を変化させることができるが、それはあまりに面倒なので、GUI を操作することで手を記述して、それをバックエンドへと送信することができる」
hsjoihs「このことを、『GUI ラッパー』と呼ぶことがある」
hsjoihs「GUI によって、『API を叩く』という七面倒臭い作業を、やりやすくしてくれる」
hsjoihs「Python ラッパーというのは、Python のコードを書くことで『API を叩く』という七面倒臭い作業をやってくれる存在」
hsjoihs「cerke_online の API を叩くとは実際どういうことか」
MIT「Discord 社は『この言語でこうやればいい』と公開しているが、それは面倒なので、有名言語でそれを代行するツールがラッパーという名前で広まっている？」
hsjoihs「実際の面倒を見せたほうがいいので、実例を持ってきます」
$source
```js
fetch(`https://little-water-8645.fly.dev/decision/infafterstep/`, {
    method: "POST",
    body: '{"type":"InfAfterStep","step":["I","L"],"plannedDirection":["U","L"],"src":["E","L"]}'
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${sessionStorage.session_token}`,
    },
  })
```
hsjoihs「これを実行することで、『LE から LI を踏んで LU へ行け』という言葉がバックエンドに伝わります」
MIT「毎回これ書くのヤダなぁ」
hsjoihs「ここに書いてある sessionStorage.session_token というのが、要はトークンで、まあ要は『この合言葉を知っている者が送ってますよ』の証であり、これが盗まれると全部乗っ取られる。このプレイヤーになりすまして任意の（バックエンドが受理することのできる）操作をできる」
MIT「cerke_online だと対戦を横取りされるだけで済むが、一般には困るなぁ」
hsjoihs「ラッパーは、面倒を避けるだけではなくて、API の仕様が変わったときにそれを『吸収する』、気付かれないようにする、という役割もあります」
hsjoihs「具体的には、先月末にバックエンドを heroku から fly.io に変えました」
hsjoihs「これはどういう意味かと言うと、中央集権的な処理をやるというタスクを私は他人のコンピュータへと委託してたけれど、その委託先を変えたという意味」
hsjoihs「しかしながら、誰も API を直に叩いておらず、すべてのプレイヤーが GUI ラッパーを経由して API を叩いていたので、この差異は全く気づかれていない」
hsjoihs「逆にいうと、API が同じであれば、ソフトウェアの中身がごっそりすり替わってても迷惑をかけない」 
MIT「バックエンドが変わったら API も変わりませんか」
hsjoihs「逆で、バックエンドの内部構造を返る際に、API だけはその変更の前と後で同じであるように努力する」 
MIT「なるほど？」
hsjoihs「例え話をしまーす」
hsjoihs「人をどれだけ首にして、どれだけ机やらパソコンやらの配置を変えたとしても、依頼Aに対して返答Bを返すという機能さえ一致していれば、内部構造が変わった頃はバレない」
hsjoihs「数学屋にだけ伝わるような言い方をすると、『写像はどのような入力をどのような出力によって送るか（あと domain と codomain）によってのみ特徴づけられる』」
MIT「heroku とか fly.io は写像の名前ではないということか」
hsjoihs「はい、委託場所の名前、代行業者の名前。代行業者を変えたら、当然別の住所に住んでいるので、別のアドレスへと API を投げなきゃいけなくなる」
hsjoihs「なので、委託先を変えるという今回の決断は、『API の破壊的変更』です。今までやっていたのと全く同じ方法では期待した動作が返ってこなくなるので」
hsjoihs「しかしながら、この破壊的変更を最小限に留める（つまり、URL だけが異なる）ようにできたので、フロントエンドの変更は一行で済んだ」
hsjoihs「これが、住所すら変わっていなかったら、フロントエンドはゼロ行の変更で済んだが、今回『heroku 無料プラン廃止』というどうしようもない地上げが来たので、オフィスを移転した、ということ」
MIT「『フロントエンドとバックエンドの合成写像』の変更がなければ、ユーザーは変化に気づかない」
hsjoihs「そのとおりで、そのことをこっちの業界では『ラッパーが、API に起きた変化を吸収する』と表現します。数学屋さんには時間軸がないけど、こっちには常に変更前と後があるので」
MIT「「分割するということは、『片方がもう片方の内部状態にアクセスする手段』の個数が比較的少数のチャネルへと減少するということです」という話、「あるパラメータ（？）を直接弄る権限をもつものが減る」の義？」
hsjoihs「その表現により十分よく近似される」
MIT「実況に戻るかぁ」
meloviliju「bot に戻ろう」
MIT「Discord.py を使うと、Python を書いて Discord API を操作できることになる」
MIT「私はどの言語も知らないので、一番情報の多い Python をダウンロードしようかな」
hsjoihs「まあ Python でいいんじゃないですか」
meloviliju「Python ってなに入れればいいんだ？」
hsjoihs「まあそこら辺を追っていきましょう」
$URL「https://www.python.jp/install/windows/install.html」
meloviliju「WSL で入れるのが一番ラクではあるけど」
MIT「それはなんですか？」
meloviliju「Linux の環境が Windows で使えるようになる」
hsjoihs「まあ、最初のうちは Windows 用のチュートリアルで困ることもないだろうし」
meloviliju「私は 3.7 と 3.9 でコケた。とはいえ、しんどくなってから使えばいい」
MIT「とりあえずインストーラをダウンロードしました」
MIT「あまりにもこの分野の知識がないので雑な権威主義をかましていく」
meloviliju「>>> がある状態で exit() と打つと Python が終わるはず」
$blockquote
```
Use exit() or Ctrl-Z plus Return to exit
```
MIT「」
$URL「https://www.python.jp/install/windows/py_launcher.html」
MIT「2+2 を打ったら 4 が出ました」
MIT「quit() で終了できるらしい」
meloviliju「quit() でも exit() でもいいのか」
meloviliju「コマンドラインというのは、コマンドプロンプトの入力行」
MIT「」
$URL「https://www.python.jp/install/windows/pip.html」
MIT「もしかして、この pip で Discord.py も」
meloviliju「そうです」
MIT「」
$URL「https://stackoverflow.com/questions/50686388/how-to-install-discord-py-rewrite」
hsjoihs「4 年前の記事です。Discord はかなり変化が激しいので、あまり役立たない可能性があります」
MIT「Math StackExchange しか見てないので質問時期を確認するという習慣がなかった」
SY「Discord 変化激しくて困りますよね。私が組んだときも発生した」
MIT「」
$URL「https://stackoverflow.com/questions/72278384/what-is-the-reason-for-getting-a-pip-error?noredirect=1&lq=1」
meloviliju「これは関係ないですね」
meloviliju「今の入力は Python ですか？」
MIT「>>> です」
meloviliju「じゃあ Ctrl + Z を押して、pip と打って下さい」
MIT「なんかめっちゃ出た」
meloviliju「じゃあできてますね」
$source
```
python -m pip install discord
```
MIT「discord と discord.py が両方ある」
meloviliju「へー。discord.py を入れたら bot 作りに戻れます」
MIT「」
$URL「https://discordpy.readthedocs.io/ja/latest/discord.html」
MIT「Discord API を使うためにアカウントを作る必要がある、たしかに」
MIT「wild bot というのは Discord の単語チョイス？」
meloviliju「そうです」
MIT「コピーボタン、どれ？」
MIT「コピーする値が 0 なんですよね」
MIT「permission ってなに？英語が分からん」
SY「認可？」
meloviliju「bot に与える権限」
SY「チェックすると、それができるような、いい感じの値が下に吐かれます」
meloviliju「あ、そういうことなの」
SY「それを押して下を見ると値が変わっている」
hsjoihs「2048 とかが出ていることから分かるように、権限のあるなしを 2 進数の桁に対応させてます」
MIT「まあそれが一番簡単ですからねぇ」
MIT「メンションを飛ばすかどうかの権限がありそう」
SY「administrator 権限」
meloviliju「乗っ取られたら全てが終わるんよ」
MIT「まあ mention everyone もつけておくか」
meloviliju「mention の仕方、めんどくさかったはず」
SY「メンションに値がついてたはず」
hsjoihs「とりあえず実験してみて、上手くいかなかったら手法を変えてもう一回すればよいわけです。わりとこの業界は『案ずるより産むが易し』で全てが回ってます」
MIT「自分で考えないと結果が返ってこない分野に慣れきっているのでその発想が出てこなかった」
$URL「https://dev.classmethod.jp/articles/discord-bot-by-discordpy/」
meloviliju「せっかくだから私も作るか」
